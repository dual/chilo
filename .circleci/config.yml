version: 2.1
orbs:
    python: circleci/python@3.2.0
    sonarcloud: sonarsource/sonarcloud@3.0.0
commands:
    install-kreyac-cli:
        steps:
            - run: wget https://stable-downloads.kreya.app/1.17.0/kreyac-linux-x64.tar.gz
            - run: tar -xvzf kreyac-linux-x64.tar.gz
    install-postman-cli:
        steps:
            - run: curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
    postman-test-api:
        steps:
            - run: postman collection run tests/integration/rest/chilo.postman_collection.json --environment tests/integration/rest/chilo.postman_environment.json --bail failure --verbose
    kreyac-test-grpc:
        steps:
            - run: ./kreyac -p ./tests/integration/grpc/Chilo.krproj collection invoke "Chilo GRPC Integration Tests"
    setup-artifacts:
        steps:
            - run: mkdir ./coverage && mkdir ./coverage/grpc && mkdir ./coverage/lint && mkdir ./coverage/reports && mkdir ./coverage/pretty && mkdir ./coverage/typing || exit 0
    setup-mock-unit-test-api:
        steps:
            - run: ln -s tests/unit/mocks/rest/api.py api_rest.py
            - run: ln -s tests/unit/mocks/grpc/api.py api_grpc.py
    setup-mock-rest-integration-basic-api:
        steps:
            - run: ln -s tests/integration/mocks/rest/declarative_api.py api_rest.py
    setup-mock-rest-integration-openapi-api:
        steps:
            - run: ln -s tests/integration/mocks/rest/openapi_api.py api_rest.py
    setup-mock-grpc-integration-api:
        steps:
            - run: ln -s tests/unit/mocks/grpc/api.py api_grpc.py
    run-grpc:
        steps:
            - run: 
                name: Run the grpc api
                background: true
                command: pipenv run grpc
    run-api:
        steps:
            - run: 
                name: Run the rest api
                background: true
                command: pipenv run rest
    run-gunicorn:
        steps:
            - run: 
                name: Run the rest api with gunicorn
                background: true
                command: pipenv run gunicorn
    sleep:
        steps:
            - run: sleep 3
    python-unit-test-report:
        steps:
            - run: pipenv run coverage
            - store_artifacts:
                path: ./coverage
            - store_test_results:
                path: ./coverage/reports/junit.xml
    pypi-setup:
        steps:
            - run: echo -e "[pypi]" >> ~/.pypirc
            - run: echo -e "username = __token__" >> ~/.pypirc
            - run: echo -e "password = $PYPI_TOKEN" >> ~/.pypirc
    pypi-deploy:
        steps:
            - run: python3 -m pip install --user --upgrade setuptools wheel
            - run: python3 setup.py sdist bdist_wheel
            - run: python3 -m pip install --user --upgrade twine
            - run: python3 -m twine upload dist/*
    mypy-test:
        steps:
            - run: pipenv run mypy-install-stubs
            - run: pipenv run mypy
            - run: pipenv run mypy-report
            - store_artifacts:
                path: ./coverage/typing
    lint-code:
        steps:
            - run: pipenv run lint
            - run: pipenv run pylint chilo_api --output-format=json > ./coverage/lint/pylint_report.json || exit 0
            - run: pipenv run pylint-json2html ./coverage/lint/pylint_report.json -o ./coverage/lint/pylint_report.html || exit 0
            - store_artifacts:
                path: ./coverage/lint
jobs:
    install-build:
        docker:
            - image: cimg/python:3.9.17
        steps:
            - checkout
            - python/install-packages:
                pkg-manager: pipenv
                args: '--dev'
            - persist_to_workspace:
                root: ~/project
                paths:
                    - ./*
    lint:
        docker:
            - image: cimg/python:3.9.17
        steps:
            - attach_workspace:
                at: ~/project
            - setup-artifacts
            - lint-code
    type-check:
        docker:
            - image: cimg/python:3.9.17
        steps:
            - attach_workspace:
                at: ~/project
            - setup-artifacts
            - mypy-test
    unit-test:
        docker:
            - image: cimg/python:3.9.17
        steps:
            - attach_workspace:
                at: ~/project
            - setup-artifacts
            - setup-mock-unit-test-api
            - python-unit-test-report
            - sonarcloud/scan
    integration-test-declarative:
        docker:
            - image: cimg/python:3.9.17
        steps:
            - attach_workspace:
                at: ~/project
            - install-postman-cli
            - setup-mock-rest-integration-basic-api
            - run-api
            - sleep
            - postman-test-api
    integration-test-openapi:
        docker:
            - image: cimg/python:3.9.17
        steps:
            - attach_workspace:
                at: ~/project
            - install-postman-cli
            - setup-mock-rest-integration-openapi-api
            - run-api
            - sleep
            - postman-test-api
    integration-test-gunicorn:
        docker:
            - image: cimg/python:3.9.17
        steps:
            - attach_workspace:
                at: ~/project
            - install-postman-cli
            - setup-mock-rest-integration-basic-api
            - run-gunicorn
            - sleep
            - postman-test-api
    integration-test-grpc:
        docker:
            - image: cimg/python:3.9.17
        steps:
            - attach_workspace:
                at: ~/project
            - install-kreyac-cli
            - setup-mock-grpc-integration-api
            - run-grpc
            - sleep
            - kreyac-test-grpc
    install-build-deploy:
        docker:
            - image: cimg/python:3.9.17
        steps:
            - checkout
            - python/install-packages:
                pkg-manager: pipenv
            - pypi-setup
            - pypi-deploy
workflows:
    install-build-deploy-workflow:
        jobs:
            - install-build-deploy:
                filters:
                    tags:
                        only: /.*/
                    branches:
                        ignore: /.*/
    install-build-test-workflow:
        jobs:
            - install-build
            - lint:
                requires:
                    - install-build
            - type-check:
                  requires:
                    - install-build
            - unit-test:
                context:
                    - sonarcloud
                requires:
                    - install-build
            - integration-test-declarative:
                requires:
                    - install-build
            - integration-test-openapi:
                requires:
                    - install-build
            - integration-test-gunicorn:
                requires:
                    - install-build
            - integration-test-grpc:
                requires:
                    - install-build
